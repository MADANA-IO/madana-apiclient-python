# coding: utf-8

"""
    madana-api

    <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>  # noqa: E501

    The version of the OpenAPI document: 0.4.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from madana_sampleclient_python.configuration import Configuration


class JsonAnalysis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'str',
        'uuid': 'str',
        'status': 'str',
        'agent': 'str',
        'datasets': 'list[JsonDatasetInfo]',
        'participants': 'list[str]',
        'views': 'str',
        'actions': 'list[JsonAnalysisRequestAction]',
        'creator': 'str',
        'dataset_count': 'str'
    }

    attribute_map = {
        'created': 'created',
        'uuid': 'uuid',
        'status': 'status',
        'agent': 'agent',
        'datasets': 'datasets',
        'participants': 'participants',
        'views': 'views',
        'actions': 'actions',
        'creator': 'creator',
        'dataset_count': 'datasetCount'
    }

    def __init__(self, created=None, uuid=None, status=None, agent=None, datasets=None, participants=None, views=None, actions=None, creator=None, dataset_count=None, local_vars_configuration=None):  # noqa: E501
        """JsonAnalysis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created = None
        self._uuid = None
        self._status = None
        self._agent = None
        self._datasets = None
        self._participants = None
        self._views = None
        self._actions = None
        self._creator = None
        self._dataset_count = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if uuid is not None:
            self.uuid = uuid
        if status is not None:
            self.status = status
        if agent is not None:
            self.agent = agent
        if datasets is not None:
            self.datasets = datasets
        if participants is not None:
            self.participants = participants
        if views is not None:
            self.views = views
        if actions is not None:
            self.actions = actions
        if creator is not None:
            self.creator = creator
        if dataset_count is not None:
            self.dataset_count = dataset_count

    @property
    def created(self):
        """Gets the created of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The created of this JsonAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JsonAnalysis.

          # noqa: E501

        :param created: The created of this JsonAnalysis.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def uuid(self):
        """Gets the uuid of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The uuid of this JsonAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this JsonAnalysis.

          # noqa: E501

        :param uuid: The uuid of this JsonAnalysis.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def status(self):
        """Gets the status of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The status of this JsonAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JsonAnalysis.

          # noqa: E501

        :param status: The status of this JsonAnalysis.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def agent(self):
        """Gets the agent of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The agent of this JsonAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this JsonAnalysis.

          # noqa: E501

        :param agent: The agent of this JsonAnalysis.  # noqa: E501
        :type: str
        """

        self._agent = agent

    @property
    def datasets(self):
        """Gets the datasets of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The datasets of this JsonAnalysis.  # noqa: E501
        :rtype: list[JsonDatasetInfo]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this JsonAnalysis.

          # noqa: E501

        :param datasets: The datasets of this JsonAnalysis.  # noqa: E501
        :type: list[JsonDatasetInfo]
        """

        self._datasets = datasets

    @property
    def participants(self):
        """Gets the participants of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The participants of this JsonAnalysis.  # noqa: E501
        :rtype: list[str]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this JsonAnalysis.

          # noqa: E501

        :param participants: The participants of this JsonAnalysis.  # noqa: E501
        :type: list[str]
        """

        self._participants = participants

    @property
    def views(self):
        """Gets the views of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The views of this JsonAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this JsonAnalysis.

          # noqa: E501

        :param views: The views of this JsonAnalysis.  # noqa: E501
        :type: str
        """

        self._views = views

    @property
    def actions(self):
        """Gets the actions of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The actions of this JsonAnalysis.  # noqa: E501
        :rtype: list[JsonAnalysisRequestAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this JsonAnalysis.

          # noqa: E501

        :param actions: The actions of this JsonAnalysis.  # noqa: E501
        :type: list[JsonAnalysisRequestAction]
        """

        self._actions = actions

    @property
    def creator(self):
        """Gets the creator of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The creator of this JsonAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this JsonAnalysis.

          # noqa: E501

        :param creator: The creator of this JsonAnalysis.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def dataset_count(self):
        """Gets the dataset_count of this JsonAnalysis.  # noqa: E501

          # noqa: E501

        :return: The dataset_count of this JsonAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._dataset_count

    @dataset_count.setter
    def dataset_count(self, dataset_count):
        """Sets the dataset_count of this JsonAnalysis.

          # noqa: E501

        :param dataset_count: The dataset_count of this JsonAnalysis.  # noqa: E501
        :type: str
        """

        self._dataset_count = dataset_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JsonAnalysis):
            return True

        return self.to_dict() != other.to_dict()
