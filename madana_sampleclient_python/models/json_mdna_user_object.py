# coding: utf-8

"""
    madana-api

    <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>  # noqa: E501

    The version of the OpenAPI document: 0.4.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from madana_sampleclient_python.configuration import Configuration


class JsonMDNAUserObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'image': 'str',
        'activated': 'str',
        'created': 'str',
        'last_active': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'image': 'image',
        'activated': 'activated',
        'created': 'created',
        'last_active': 'lastActive',
        'user_name': 'userName'
    }

    def __init__(self, image=None, activated=None, created=None, last_active=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """JsonMDNAUserObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._image = None
        self._activated = None
        self._created = None
        self._last_active = None
        self._user_name = None
        self.discriminator = None

        if image is not None:
            self.image = image
        if activated is not None:
            self.activated = activated
        if created is not None:
            self.created = created
        if last_active is not None:
            self.last_active = last_active
        if user_name is not None:
            self.user_name = user_name

    @property
    def image(self):
        """Gets the image of this JsonMDNAUserObject.  # noqa: E501

          # noqa: E501

        :return: The image of this JsonMDNAUserObject.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this JsonMDNAUserObject.

          # noqa: E501

        :param image: The image of this JsonMDNAUserObject.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def activated(self):
        """Gets the activated of this JsonMDNAUserObject.  # noqa: E501

          # noqa: E501

        :return: The activated of this JsonMDNAUserObject.  # noqa: E501
        :rtype: str
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this JsonMDNAUserObject.

          # noqa: E501

        :param activated: The activated of this JsonMDNAUserObject.  # noqa: E501
        :type: str
        """

        self._activated = activated

    @property
    def created(self):
        """Gets the created of this JsonMDNAUserObject.  # noqa: E501

          # noqa: E501

        :return: The created of this JsonMDNAUserObject.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JsonMDNAUserObject.

          # noqa: E501

        :param created: The created of this JsonMDNAUserObject.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def last_active(self):
        """Gets the last_active of this JsonMDNAUserObject.  # noqa: E501

          # noqa: E501

        :return: The last_active of this JsonMDNAUserObject.  # noqa: E501
        :rtype: str
        """
        return self._last_active

    @last_active.setter
    def last_active(self, last_active):
        """Sets the last_active of this JsonMDNAUserObject.

          # noqa: E501

        :param last_active: The last_active of this JsonMDNAUserObject.  # noqa: E501
        :type: str
        """

        self._last_active = last_active

    @property
    def user_name(self):
        """Gets the user_name of this JsonMDNAUserObject.  # noqa: E501

          # noqa: E501

        :return: The user_name of this JsonMDNAUserObject.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this JsonMDNAUserObject.

          # noqa: E501

        :param user_name: The user_name of this JsonMDNAUserObject.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonMDNAUserObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JsonMDNAUserObject):
            return True

        return self.to_dict() != other.to_dict()
