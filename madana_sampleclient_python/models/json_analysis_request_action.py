# coding: utf-8

"""
    madana-api

    <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>  # noqa: E501

    The version of the OpenAPI document: 0.4.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from madana_sampleclient_python.configuration import Configuration


class JsonAnalysisRequestAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'request_id': 'str',
        'user': 'str',
        'connection': 'str',
        'date': 'str',
        'fingerprint': 'str',
        'application': 'str',
        'action': 'str',
        'details': 'str',
        'signature': 'str'
    }

    attribute_map = {
        'request_id': 'requestID',
        'user': 'user',
        'connection': 'connection',
        'date': 'date',
        'fingerprint': 'fingerprint',
        'application': 'application',
        'action': 'action',
        'details': 'details',
        'signature': 'signature'
    }

    def __init__(self, request_id=None, user=None, connection=None, date=None, fingerprint=None, application=None, action=None, details=None, signature=None, local_vars_configuration=None):  # noqa: E501
        """JsonAnalysisRequestAction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._request_id = None
        self._user = None
        self._connection = None
        self._date = None
        self._fingerprint = None
        self._application = None
        self._action = None
        self._details = None
        self._signature = None
        self.discriminator = None

        if request_id is not None:
            self.request_id = request_id
        if user is not None:
            self.user = user
        if connection is not None:
            self.connection = connection
        if date is not None:
            self.date = date
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if application is not None:
            self.application = application
        if action is not None:
            self.action = action
        if details is not None:
            self.details = details
        if signature is not None:
            self.signature = signature

    @property
    def request_id(self):
        """Gets the request_id of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The request_id of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this JsonAnalysisRequestAction.

          # noqa: E501

        :param request_id: The request_id of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def user(self):
        """Gets the user of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The user of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JsonAnalysisRequestAction.

          # noqa: E501

        :param user: The user of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def connection(self):
        """Gets the connection of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The connection of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this JsonAnalysisRequestAction.

          # noqa: E501

        :param connection: The connection of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._connection = connection

    @property
    def date(self):
        """Gets the date of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The date of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this JsonAnalysisRequestAction.

          # noqa: E501

        :param date: The date of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def fingerprint(self):
        """Gets the fingerprint of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The fingerprint of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this JsonAnalysisRequestAction.

          # noqa: E501

        :param fingerprint: The fingerprint of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def application(self):
        """Gets the application of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The application of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this JsonAnalysisRequestAction.

          # noqa: E501

        :param application: The application of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def action(self):
        """Gets the action of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The action of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this JsonAnalysisRequestAction.

          # noqa: E501

        :param action: The action of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def details(self):
        """Gets the details of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The details of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this JsonAnalysisRequestAction.

          # noqa: E501

        :param details: The details of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def signature(self):
        """Gets the signature of this JsonAnalysisRequestAction.  # noqa: E501

          # noqa: E501

        :return: The signature of this JsonAnalysisRequestAction.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this JsonAnalysisRequestAction.

          # noqa: E501

        :param signature: The signature of this JsonAnalysisRequestAction.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonAnalysisRequestAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JsonAnalysisRequestAction):
            return True

        return self.to_dict() != other.to_dict()
