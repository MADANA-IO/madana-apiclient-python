# coding: utf-8

"""
    madana-api

    <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>  # noqa: E501

    The version of the OpenAPI document: 0.4.12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from madana_sampleclient_python.configuration import Configuration


class JsonDatasetInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'signature': 'str',
        'size': 'str',
        'hash': 'str',
        'creationdate': 'str',
        'fingerprint': 'str'
    }

    attribute_map = {
        'signature': 'signature',
        'size': 'size',
        'hash': 'hash',
        'creationdate': 'creationdate',
        'fingerprint': 'fingerprint'
    }

    def __init__(self, signature=None, size=None, hash=None, creationdate=None, fingerprint=None, local_vars_configuration=None):  # noqa: E501
        """JsonDatasetInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._signature = None
        self._size = None
        self._hash = None
        self._creationdate = None
        self._fingerprint = None
        self.discriminator = None

        if signature is not None:
            self.signature = signature
        if size is not None:
            self.size = size
        if hash is not None:
            self.hash = hash
        if creationdate is not None:
            self.creationdate = creationdate
        if fingerprint is not None:
            self.fingerprint = fingerprint

    @property
    def signature(self):
        """Gets the signature of this JsonDatasetInfo.  # noqa: E501

          # noqa: E501

        :return: The signature of this JsonDatasetInfo.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this JsonDatasetInfo.

          # noqa: E501

        :param signature: The signature of this JsonDatasetInfo.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def size(self):
        """Gets the size of this JsonDatasetInfo.  # noqa: E501

          # noqa: E501

        :return: The size of this JsonDatasetInfo.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this JsonDatasetInfo.

          # noqa: E501

        :param size: The size of this JsonDatasetInfo.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def hash(self):
        """Gets the hash of this JsonDatasetInfo.  # noqa: E501

          # noqa: E501

        :return: The hash of this JsonDatasetInfo.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this JsonDatasetInfo.

          # noqa: E501

        :param hash: The hash of this JsonDatasetInfo.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def creationdate(self):
        """Gets the creationdate of this JsonDatasetInfo.  # noqa: E501

          # noqa: E501

        :return: The creationdate of this JsonDatasetInfo.  # noqa: E501
        :rtype: str
        """
        return self._creationdate

    @creationdate.setter
    def creationdate(self, creationdate):
        """Sets the creationdate of this JsonDatasetInfo.

          # noqa: E501

        :param creationdate: The creationdate of this JsonDatasetInfo.  # noqa: E501
        :type: str
        """

        self._creationdate = creationdate

    @property
    def fingerprint(self):
        """Gets the fingerprint of this JsonDatasetInfo.  # noqa: E501

          # noqa: E501

        :return: The fingerprint of this JsonDatasetInfo.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this JsonDatasetInfo.

          # noqa: E501

        :param fingerprint: The fingerprint of this JsonDatasetInfo.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonDatasetInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JsonDatasetInfo):
            return True

        return self.to_dict() != other.to_dict()
